#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#define ROW 6
#define COL 6
#define HORSE 4


typedef struct man {
	int row;
	int col;
	char horse;
}MAN;


char dice_img[6] = { "" };


void dice(MAN m, char a[6][6])
{
	srand((int)time(NULL));
	int dice_num = rand() % 7 + 1;
	int i=0;

	a[m.row][m.col] = ' '; 

							 
	for (i = 0; i < 6; i++)
	{
		dice_img[i] = ' ';
	}


	switch (dice_num)
	{

	case 1:

		if (m.row == 0 && m.col < 5)
			++m.col;


		else if (m.col == 5 && m.row < 5)
			++m.row;


		else if (m.row == 5 && m.col > 0)
			--m.col;


		else if (m.col == 0 && m.row > 0)
			--m.row;

		a[m.row][m.col] = m.horse;


		dice_img[0] = 'o';
		break;

	case 2:

		if (m.row == 0 && m.col < 4)
			m.col = m.col + 2;
		else if (m.row == 0 && m.col == 4)
		{
			++m.col;
			++m.row;
		}


		else if (m.col == 5 && m.row < 4)
			m.row = m.row + 2;
		else if (m.col == 5 && m.row == 4)
		{
			++m.row;
			--m.col;
		}


		else if (m.row == 5 && m.col > 1)
			m.col = m.col - 2;
		else if (m.row == 5 && m.col == 1)
		{
			--m.col;
			--m.row;
		}


		else if (m.col == 0 && m.row > 1)
			m.row = m.row - 2;
		else if (m.col == 0 && m.row == 1)
			++m.row;

		a[m.row][m.col] = m.horse;

		dice_img[0] = 'o';
		dice_img[1] = 'o';
		break;

	case 3:

		if (m.row == 0 && m.col < 3)
			m.col = m.col + 3;
		else if (m.row == 0 && m.col == 3)
		{
			m.col = m.col + 2;
			m.row = m.row + 1;
		}
		else if (m.row == 0 && m.col == 4)
		{
			m.col = m.col + 1;
			m.row = m.row + 2;
		}


		else if (m.col == 5 && m.row < 3)
		{
			m.row = m.row + 3;
		}
		else if (m.col == 5 && m.row == 3)
		{
			m.row = m.row + 2;
			m.col = m.col - 1;
		}
		else if (m.col == 5 && m.row == 4)
		{
			m.row = m.row + 1;
			m.col = m.col - 2;
		}


		else if (m.row == 5 && m.row > 2)
			m.col = m.col - 3;
		else if (m.row == 5 && m.col == 2)
		{
			m.col = m.col - 2;
			m.row = m.row - 1;
		}
		else if (m.row == 5 && m.col == 1)
		{
			m.col = m.col - 1;
			m.row = m.row - 2;
		}


		else if (m.col == 0 && m.row > 2)
			m.row = m.row - 3;
		else if (m.col == 0 && m.row == 2)
			m.row = m.row + 2;
		else if (m.col == 0 && m.row == 1)
			m.row = m.row + 1;

		a[m.row][m.col] = m.horse;

		dice_img[0] = 'o';
		dice_img[1] = 'o';
		dice_img[2] = 'o';
		break;

	case 4:

		if (m.row == 0 && m.col < 2)
			m.col = m.col + 4;
		else if (m.row == 0 && m.col == 2)
		{
			m.col = m.col + 3;
			++m.row;
		}
		else if (m.row == 0 && m.col == 3)
		{
			m.col = m.col + 2;
			m.row = m.row + 2;
		}
		else if (m.row == 0 && m.col == 4)
		{
			m.col = m.col + 1;
			m.row = m.row + 3;
		}


		else if (m.col == 5 && m.row < 2)
			m.row = m.row + 4;
		else if (m.col == 5 && m.row == 2)
		{
			m.row = m.row + 3;
			m.col = m.col - 1;
		}
		else if (m.col == 5 && m.row == 3)
		{
			m.row = m.row + 2;
			m.col = m.col - 2;
		}
		else if (m.col == 5 && m.row == 4)
		{
			m.row = m.row + 1;
			m.col = m.col - 3;
		}


		else if (m.row == 5 && m.col > 3)
			m.col = m.col - 4;
		else if (m.row == 5 && m.col == 3)
		{
			m.col = m.col - 3;
			m.row = m.row - 1;
		}
		else if (m.row == 5 && m.col == 2)
		{
			m.col = m.col - 2;
			m.row = m.row - 2;
		}
		else if (m.row == 5 && m.col == 1)
		{
			m.col = m.col - 1;
			m.row = m.row - 3;
		}


		else if (m.col == 0 && m.row > 3)
			m.row = m.row - 4;
		else if (m.col == 0 && m.row == 3)
			m.row = m.row - 3;
		else if (m.col == 0 && m.row == 2)
			m.row = m.row - 2;
		else if (m.col == 0 && m.row == 1)
			m.row = m.row - 1;


		a[m.row][m.col] = m.horse;

		dice_img[0] = 'o';
		dice_img[1] = 'o';
		dice_img[2] = 'o';
		dice_img[3] = 'o';
		break;

	case 5:

		if (m.row == 0 && m.col == 0)
			m.col = m.col + 5;
		else if (m.row == 0 && m.col == 1)
		{
			m.col = m.col + 4;
			m.row = m.row + 1;
		}
		else if (m.row == 0 && m.col == 2)
		{
			m.col = m.col + 3;
			m.row = m.row + 2;
		}
		else if (m.row == 0 && m.col == 3)
		{
			m.col = m.col + 2;
			m.row = m.row + 3;
		}
		else if (m.row == 0 && m.col == 4)
		{
			m.col = m.col + 1;
			m.row = m.row + 4;
		}


		else if (m.col == 5 && m.row == 0)
			m.row = m.row + 5;
		else if (m.col == 5 && m.row == 1)
		{
			m.row = m.row + 4;
			m.col = m.col - 1;
		}
		else if (m.col == 5 && m.row == 2)
		{
			m.row = m.row + 3;
			m.col = m.col - 2;
		}
		else if (m.col == 5 && m.row == 3)
		{
			m.row = m.row + 2;
			m.col = m.col - 3;
		}
		else if (m.col == 5 && m.row == 4)
		{
			m.row = m.row + 1;
			m.col = m.col - 4;
		}


		else if (m.row == 5 && m.col == 5)
			m.col = m.col - 5;
		else if (m.row == 5 && m.col == 4)
		{
			m.col = m.col - 4;
			m.row = m.row - 1;
		}
		else if (m.row == 5 && m.col == 3)
		{
			m.col = m.col - 3;
			m.row = m.row - 2;
		}
		else if (m.row == 5 && m.col == 2)
		{
			m.col = m.col - 2;
			m.row = m.row - 3;
		}
		else if (m.row == 5 && m.col == 1)
		{
			m.col = m.col - 1;
			m.row = m.row - 4;
		}


		else if (m.col == 0 && m.row == 5)
			m.row = m.row - 5;
		else if (m.col == 0 && m.row == 4)
			m.row = m.row - 4;
		else if (m.col == 0 && m.row == 3)
			m.row = m.row - 3;
		else if (m.col == 0 && m.row == 2)
			m.row = m.row - 2;
		else if (m.col == 0 && m.row == 1)
			m.row = m.row - 1;

		a[m.row][m.col] = m.horse;

		dice_img[0] = 'o';
		dice_img[1] = 'o';
		dice_img[2] = 'o';
		dice_img[3] = 'o';
		dice_img[4] = 'o';
		break;


	case 6:

		if (m.row == 0 && m.col == 0)
		{
			m.col = m.col + 5;
			m.row = m.row + 1;
		}
		else if (m.row == 0 && m.col == 1)
		{
			m.col = m.col + 4;
			m.row = m.row + 2;
		}
		else if (m.row == 0 && m.col == 2)
		{
			m.col = m.col + 3;
			m.row = m.row + 3;
		}
		else if (m.row == 0 && m.col == 3)
		{
			m.col = m.col + 2;
			m.row = m.row + 4;
		}
		else if (m.row == 0 && m.col == 4)
		{
			m.col = m.col + 1;
			m.row = m.row + 5;
		}


		else if (m.col == 5 && m.row == 0)
		{
			m.row = m.row + 5;
			m.col = m.col - 1;
		}
		else if (m.col == 5 && m.row == 1)
		{
			m.row = m.row + 4;
			m.col = m.col - 2;
		}
		else if (m.col == 5 && m.row == 2)
		{
			m.row = m.row + 3;
			m.col = m.col - 3;
		}
		else if (m.col == 5 && m.row == 3)
		{
			m.row = m.row + 2;
			m.col = m.col - 4;
		}
		else if (m.col == 5 && m.row == 4)
		{
			m.row = m.row + 1;
			m.col = m.col - 5;
		}


		else if (m.row == 5 && m.col == 5)
		{
			m.col = m.col - 5;
			m.row = m.row - 1;
		}
		else if (m.row == 5 && m.col == 4)
		{
			m.col = m.col - 4;
			m.row = m.row - 2;
		}
		else if (m.row == 5 && m.col == 3)
		{
			m.col = m.col - 3;
			m.row = m.row - 3;
		}
		else if (m.row == 5 && m.col == 2)
		{
			m.col = m.col - 2;
			m.row = m.row - 4;
		}
		else if (m.row == 5 && m.col == 1)
		{
			m.col = m.col - 1;
			m.row = m.row - 5;
		}


		else if (m.row == 5 && m.col == 0)
			m.row = m.row - 5;
		else if (m.row == 4 && m.col == 0)
			m.row = m.row - 4;
		else if (m.row == 3 && m.col == 0)
			m.row = m.row - 3;
		else if (m.row == 2 && m.col == 0)
			m.row = m.row - 2;
		else if (m.row == 1 && m.col == 0)
			m.row = m.row - 1;

		a[m.row][m.col] = m.horse;

		dice_img[0] = 'o';
		dice_img[1] = 'o';
		dice_img[2] = 'o';
		dice_img[3] = 'o';
		dice_img[4] = 'o';
		dice_img[5] = 'o';
		break;

	}

}

void mapdraw(char a[6][6])
{
	int i=0;
	int j=0;
	printf("\n            미니게임 ★ 보드게임     \n\n");
	for (i = 0; i < ROW; i++) {
		if (i != 0 && i != 5)
		{
			if (i == 2) 
			{
				printf("    ┏━┓      ┏━━━━┓      ┏━┓\n");
				printf("    ");
				for (j = 0; j < COL; j++)
				{
					if (j == 0 || j == 5)
						printf("┃%2c┃", a[i][j]);
					else if (j == 2)
						printf("┃    ");
					else if (j == 3)
						printf("    ┃");
					else  printf("      ");
				}
				printf("\n");
				printf("    ┗━┛      ┃ %2c%2c%2c ┃      ┗━┛\n", dice_img[0], dice_img[1], dice_img[2]);
			}


			else if (i == 3)
			{
				printf("    ┏━┓      ┃ %2c%2c%2c ┃      ┏━┓\n", dice_img[3], dice_img[4], dice_img[5]);
				printf("    ");
				for (j = 0; j < COL; j++)
				{
					if (j == 0 || j == 5)
						printf("┃%2c┃", a[i][j]);
					else if (j == 2)
						printf("┃    ");
					else if (j == 3)
						printf("    ┃");
					else { printf("      "); }
				}
				printf("\n");
				printf("    ┗━┛      ┗━━━━┛      ┗━┛\n");
			}

			else {
				printf("    ┏━┓                        ┏━┓\n");
				printf("    ");
				for (j = 0; j < COL; j++)
				{
					if (j == 0 || j == 5)
					{
						printf("┃%2c┃", a[i][j]);
					}
					else { printf("      "); }
				}
				printf("\n");
				printf("    ┗━┛                        ┗━┛\n");
			}
		}

		else 
		{
			printf("    ┏━┓┏━┓┏━┓┏━┓┏━┓┏━┓\n");
			printf("    ");
			for (j = 0; j < COL; j++)
			{

				printf("┃%2c┃", a[i][j]);
			}
			printf("\n");
			printf("    ┗━┛┗━┛┗━┛┗━┛┗━┛┗━┛\n");
		}

	}
}

int main(void)
{
	int num = 0;
	int i=1;
	char map[6][6] = { "" };

	printf("\n");
	printf("보드게임을 할 인원을 입력하세요 ( 최대 4명 )  >> ");
	scanf_s("%d", &num);

	system("cls");

	MAN m[HORSE] = { { 0,0,'1' },{ 0,0,'2' },{ 0,0,'3' },{ 0,0,'4' } };

	for (i = 1; i>0; i++)
	{
		int na = 0;
		na++;
		char c = ' ';
		mapdraw(map);
		printf("< %d째 순서 > 주사위를 돌려주세요 <enter> ", i);
		scanf_s("%c", &c);
		dice(m[i - 1], map);
		mapdraw(map);
		system("cls");
		if (i == num)
			i = 0;
		if (na == 7)
			break;
	}


	return 0;
}
